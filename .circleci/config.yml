# Getting started with CircleCI
# https://circleci.com/docs/2.0/first-steps/ 
#
# .circleci/config.yml
version: 2
jobs:
  build:
    docker:
      - image: circleci/node:9.11.1-stretch

    steps:
      - run:
          name: Install dependencies
          command: |
             sudo apt-get update && sudo apt-get install -y curl 
             mkdir -p /tmp/test-results/
             
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose

      - setup_remote_docker

      - checkout

      - run:
          name: Start App Container
          #http://172.17.0.1:8000
          command: |
             set -x
             docker-compose version
             docker-compose up -d

      # OWASP ModSecurity Core Rule Set Container (Apache Reverse Proxy)
      # franbuehler/modsecurity-crs-rp
      # Environment variables:
      # PARANOIA:   paranoia_level
      # ANOMALYIN:  inbound_anomaly_score_threshold
      # ANOMALYOUT: outbound_anomaly_score_threshold 
      # See https://coreruleset.org/
      #
      # BACKEND:    application backend
      # PORT:       listening port of apache, this port must be exposed: --expose
      - run:
           name: Start OWASP ModSecurity CRS Container in front of application for application tests
           #http://172.17.0.2:8001
           #we set inbound and outbound anomaly score to 1, no tolerance
           command: |
             docker login -u ${DOCKER_USER} -p ${DOCKER_PASS};
             docker pull franbuehler/modsecurity-crs-rp && \
             docker run -dt --name apachecrstc -e PARANOIA=2 -e \
             ANOMALYIN=1 -e ANOMALYOUT=1 -e BACKEND=http://172.17.0.1:8000 \
             -e PORT=8001 --expose 8001 franbuehler/modsecurity-crs-rp

             #docker run -dt --name apachecrs franbuehler/modsecurity-crs-rp
             
      # ModSecurity Tuning:
      # See https://www.netnea.com/cms/apache-tutorial-8_handling-false-positives-modsecurity-core-rule-set/
      # We use rule exclusion example files:
      # REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf OR
      # RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf
      - run:
          name: ModSecurity Tuning - Load rule exclusions
          command: |
            # rule 920350 (msg: Host header is a numeric IP address) triggers, 
            # because we use IP addresses instead of hostnames.
            # This rule must not be excluded in production!
            printf "\nSecRuleRemoveById 920350\n" > tmp.conf
            # CRS container for application tests:
            docker cp tmp.conf apachecrstc:/etc/httpd/modsecurity.d/owasp-crs/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf;
            docker exec apachecrstc /usr/sbin/httpd -k graceful

       # Debugging possibilities:
#      - run:
#          name: curl test
#          command: |
#             (
#             docker pull hiromasaono/curl && \
#             docker run -dt --name curl hiromasaono/curl && \
#             docker exec -ti curl curl http://172.17.0.1:8000/register
#             docker exec -ti curl curl http://172.17.0.2:8001/register
#             docker exec -ti apachecrs cat /etc/httpd/logs/error.log
#             docker exec -ti apachecrs curl 172.17.0.1:8000
#             )
#
      - run:
          name: Application Tests with Testcafe
          command: |
             # https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
             # creating dummy container which will hold a volume with config
             docker create -v /tests --name configs alpine:latest /bin/true
             # copying config file into this volume
             docker cp /home/circleci/project/testcafe/tests/test.js configs:/tests
             #docker cp /home/circleci/project/testcafe/tests/mongodb.js configs:/tests
             # starting application container using this volume
             docker pull testcafe/testcafe
             # skip-js-errors because of: Uncaught Error: Bootstrap tooltips require Tether
             docker run --volumes-from configs:rw --name testcafe -it testcafe/testcafe --skip-js-errors 'chromium:headless --no-sandbox' /tests/test.js #/tests/mongodb.js
#            docker cp testcafe:/tmp/res.xml /tmp/test-results/
#            docker run --volumes-from configs:rw --name testcafe -it testcafe/testcafe --reporter xunit:/tmp/res.xml --skip-js-errors 'chromium:headless --no-sandbox' /tests/test.js /tests/mongodb.js

      - run:
          name: Application Tests with CRS with Testcafe
          command: |
             docker cp /home/circleci/project/testcafe/tests/testcrs-match.js configs:/tests
             # docker cp /home/circleci/project/testcafe/tests/mongodbcrs.js configs:/tests
             # skip-js-errors because of: Uncaught Error: Bootstrap tooltips require Tether
             docker run --volumes-from configs:rw --name testcafecrs -it testcafe/testcafe --skip-js-errors 'chromium:headless --no-sandbox' /tests/testcrs-match.js #/tests/mongodbcrs.js
#            docker cp testcafe:/tmp/res.xml /tmp/test-results/
#            docker run -v /home/circleci/project/testcafe/tests:/tests -it testcafe/testcafe chrome /tests/testcrs.js --skip-js-errors --reporter xunit:/tmp/test-results/res.xml

      - run:
          # Fail if ModSecurity log is not empty
          name: Show ModSecurity logs of Testcafe Tests
          command: |
              docker exec apachecrstc cat /etc/httpd/logs/error.log \
              | grep ModSecurity | grep msg && exit 1 || exit 0

              # If not empty -> Repair your application OR
              #              -> ModSecurity Tuning:
              # See https://www.netnea.com/cms/apache-tutorial-8_handling-false-positives-modsecurity-core-rule-set/ OR
              #              -> GitHub issue: https://github.com/SpiderLabs/owasp-modsecurity-crs
              
          # we always want to see this step:        
          when: always

      - store_test_results:
           path: /tmp/test-results 
