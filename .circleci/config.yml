# Getting started with CircleCI
# https://circleci.com/docs/2.0/first-steps/ 
#
# .circleci/config.yml
version: 2
jobs:
  build:
    docker:
      - image: circleci/node:stretch

    steps:
      - run:
          name: Install dependencies
          command: |
             sudo apt-get update && sudo apt-get install -y curl 
             mkdir -p /tmp/test-results/
             
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose

      - setup_remote_docker

      - checkout

      - run:
          name: Start App Container
          #http://172.17.0.1:8000
          command: |
             set -x
             docker-compose version
             docker-compose up -d

      # OWASP ModSecurity Core Rule Set Container (Apache Reverse Proxy)
      # owasp/modsecurity-crs
      # Environment variables:
      # PARANOIA:   paranoia_level
      # ANOMALYIN:  inbound_anomaly_score_threshold
      # ANOMALYOUT: outbound_anomaly_score_threshold 
      # See https://coreruleset.org/
      #
      # UPSTREAM:    application backend
      - run:
           name: Start OWASP ModSecurity CRS Container in front of application for application tests
           #http://172.17.0.2:443
           #we set inbound and outbound anomaly score to 1, no tolerance
           command: |
             docker pull owasp/modsecurity-crs:v3.2-modsec2-apache && \
             docker run -dt --name apachecrstc -e PARANOIA=2 -e \
             ANOMALYIN=1 -e ANOMALYOUT=1 -e UPSTREAM=http://172.17.0.1:8000 \
             --expose 443 owasp/modsecurity-crs:v3.2-modsec2-apache

      # ModSecurity Tuning:
      # See https://www.netnea.com/cms/apache-tutorial-8_handling-false-positives-modsecurity-core-rule-set/
      # We use rule exclusion example files:
      # REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf OR
      # RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf
      - run:
          name: ModSecurity Tuning - Load rule exclusions
          command: |
            printf '# Rule 920350 (msg: Host header is a numeric IP address) triggers,\n' > tmp.conf
            printf '# because we use IP addresses instead of hostnames.\n' >> tmp.conf
            printf '# This rule must not be excluded in production!\n' >> tmp.conf
            printf '\nSecRuleRemoveById 920350\n\n' >> tmp.conf
            printf '# Rule 942440 (msg: SQL Comment Sequence Detected) and,\n' >> tmp.conf
            printf '# Rule 942450 (msg: SQL Hex Encoding Identified) and,\n' >> tmp.conf
            printf '# Rule 942100 (msg: SQL Injection Attack Detected via libinjection) trigger,\n' >> tmp.conf
            printf '# because of random characters in the session cookie.\n' >> tmp.conf
            printf '\nSecRuleUpdateTargetById 942100 "!REQUEST_COOKIES:session"\n' >> tmp.conf
            printf '\nSecRuleUpdateTargetById 942440 "!REQUEST_COOKIES:session"\n' >> tmp.conf
            printf '\nSecRuleUpdateTargetById 942450 "!REQUEST_COOKIES:session"\n' >> tmp.conf
            # CRS container for application tests:
            docker cp tmp.conf apachecrstc:/etc/modsecurity.d/owasp-crs/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf;
            docker exec apachecrstc /usr/local/apache2/bin/apachectl -f /usr/local/apache2/conf/httpd.conf -k graceful

       # Debugging possibilities:
#      - run:
#          name: curl test
#          command: |
#             (
#             docker pull hiromasaono/curl && \
#             docker run -dt --name curl hiromasaono/curl && \
#             docker exec -ti curl curl http://172.17.0.1:8000/register
#             docker exec -ti curl curl http://172.17.0.2:8001/register
#             docker exec -ti apachecrs cat /var/log/apache2/error.log
#             docker exec -ti apachecrs curl 172.17.0.1:8000
#             )
#
      - run:
          name: Application Tests with Testcafe
          command: |
             # https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
             # creating dummy container which will hold a volume with config
             docker create -v /tests --name configs alpine:latest /bin/true
             # copying config file into this volume
             docker cp /home/circleci/project/testcafe/tests/test.js configs:/tests
             #docker cp /home/circleci/project/testcafe/tests/mongodb.js configs:/tests
             # starting application container using this volume
             docker pull testcafe/testcafe
             # skip-js-errors because of: Uncaught Error: Bootstrap tooltips require Tether
             docker run --volumes-from configs:rw --name testcafe -it testcafe/testcafe --skip-js-errors 'chromium:headless --no-sandbox' /tests/test.js #/tests/mongodb.js
#            docker cp testcafe:/tmp/res.xml /tmp/test-results/
#            docker run --volumes-from configs:rw --name testcafe -it testcafe/testcafe --reporter xunit:/tmp/res.xml --skip-js-errors 'chromium:headless --no-sandbox' /tests/test.js /tests/mongodb.js

      - run:
          name: Application Tests with CRS with Testcafe
          command: |
             docker cp /home/circleci/project/testcafe/tests/testcrs.js configs:/tests
             # Intentionally trigger an error with a Testcafe Test that calls $select in ARGS_GET:
             # docker cp /home/circleci/project/testcafe/tests/testcrs-match.js configs:/tests
             # Some evil Mongo DB statements:
             # docker cp /home/circleci/project/testcafe/tests/mongodbcrs.js configs:/tests
             # skip-js-errors because of: Uncaught Error: Bootstrap tooltips require Tether
             docker run --volumes-from configs:rw --name testcafecrs -it testcafe/testcafe --skip-js-errors 'chromium --ignore-certificate-errors' /tests/testcrs.js #/tests/testcrs-match.js /tests/mongodbcrs.js
#            docker cp testcafe:/tmp/res.xml /tmp/test-results/
#            docker run -v /home/circleci/project/testcafe/tests:/tests -it testcafe/testcafe chrome /tests/testcrs.js --skip-js-errors --reporter xunit:/tmp/test-results/res.xml

      - run:
          name: WAF Tests with malicous request to test WAF itself
          command: |
             docker cp /home/circleci/project/testcafe/tests/testwaf.js configs:/tests
             # skip-js-errors because of: Uncaught Error: Bootstrap tooltips require Tether
             docker run --volumes-from configs:rw --name testcafewaf -it testcafe/testcafe --skip-js-errors 'chromium:headless --no-sandbox' /tests/testwaf.js 

      - run:
          # Fail if ModSecurity log is not empty
          name: Show ModSecurity logs of Testcafe Tests
          command: |
              docker exec apachecrstc cat /var/log/apache2/error.log \
              | grep ModSecurity | grep -vi "My evil WAF Test" | grep -v " Score: 30" | grep msg && exit 1 || exit 0

              # If not empty -> Repair your application OR
              #              -> ModSecurity Tuning:
              # See https://www.netnea.com/cms/apache-tutorial-8_handling-false-positives-modsecurity-core-rule-set/ OR
              #              -> GitHub issue: https://github.com/SpiderLabs/owasp-modsecurity-crs
              
          # we always want to see this step:        
          when: always

      - run:
          # Fail if ModSecurity log does not contain WAF Test String "My evil WAF Test"
          # '<script>alert("My evil WAF Test")</script>'
          name: Search for WAF Test String "My evil WAF Test" in ModSecurity logs
          command: |
              docker exec apachecrstc cat /var/log/apache2/error.log
              # If empty -> WAF Test String <script>alert(My evil WAF Test)</script>
              # did not trigger a CRS rule. 
              # That means CRS is not working properly or test was aborted.
              
          # we always want to see this step:        
          when: always

      - store_test_results:
           path: /tmp/test-results 
